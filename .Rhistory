summary(m)
View(m)
View(m)
View(tb)
View(tb)
r1 <- lm(meth~before, data = data, subset = state=='MT')
summary(r1)
View(r1)
View(r1)
mean_Montana <- mean(data$state == "MT")
mean_XX <- mean(data$state == "XX")
mean_states <- cbind(mean_Montana, mean_XX)
r_MT <- lm(meth~before, data = data, subset=state=='MT')
summary(r_MT)
r_XX <- lm(meth~before, data = data, subset=state=='XX')
regression2_XX <- lm(meth~before, data = data, subset=state=='XX')
MT_before <- data %>% filter(data$state=='MT' & data$before==TRUE)
MT_before_mean <- mean(MT_before$meth)
MT_after <- data %>% filter(data$state=='MT' & data$before==FALSE)
MT_after_mean <- mean(MT_after$meth)
XX_before <- data %>% filter(data$state=='XX' & data$before==TRUE)
XX_before_mean <- mean(XX_before$meth)
XX_after <- data %>% filter(data$state=='XX' & data$before==FALSE)
XX_after_mean <- mean(XX_after$meth)
difference <- cbind(MT_before_mean, MT_after_mean, XX_before_mean, XX_after_mean)
diff <- cbind(MT_before_mean, MT_after_mean, XX_before_mean, XX_after_mean)
r3 <- lm(meth~state * before, data = data)
diff <- cbind(MT_before_mean, MT_after_mean, XX_before_mean, XX_after_mean)
r3 <- lm(meth~state * before, data = data)
summary(regression3)
r3 <- lm(meth~state * before, data = data)
summary(r3)
r3 <- lm(meth~state * before, data = data)
MT_before <- data %>% filter(data$state=='MT' & data$before==TRUE)
MT_before_mean <- mean(MT_before$meth)
MT_after <- data %>% filter(data$state=='MT' & data$before==FALSE)
MT_after_mean <- mean(MT_after$meth)
XX_before <- data %>% filter(data$state=='XX' & data$before==TRUE)
XX_before_mean <- mean(XX_before$meth)
XX_after <- data %>% filter(data$state=='XX' & data$before==FALSE)
XX_after_mean <- mean(XX_after$meth)
diff <- cbind(MT_before_mean, MT_after_mean, XX_before_mean, XX_after_mean)
r3 <- lm(meth~state * before, data = data)
data
r3 <- lm(meth~state + before, data = data)
r3 <- lm(meth~state, data = data)
r3 <- lm(meth~state * before, data = data)
summary(r3)
r3 <- lm(formula = meth ~ state * before + age + sex + tv, data = dat)
r3 <- lm(formula = meth ~ state * before + age + sex + tv, data = data)
r3 <- lm(formula = meth ~ state * before + age + sex + tv, data = diff)
diff
data[data$state=='XX]
data[data$state=='XX]
data[data$state=='XX']
data
data <- read.csv(file="yrbs.tsv", header=TRUE, sep="\t", stringsAsFactors = FALSE)
data
MT_before <- data %>% filter(data$state=='MT' & data$before==TRUE)
data <- read.csv(file="yrbs.tsv", header=TRUE, sep="\t", stringsAsFactors = FALSE)
MT_before <- data %>% filter(data$state=='MT' & data$before==TRUE)
data$before <- with(data, ifelse(year<=2005, TRUE, FALSE))
tb <- aggregate(data$meth, by=list(before=data$before), mean)
MT_before <- data %>% filter(data$state=='MT' & data$before==TRUE)
MT_before_mean <- mean(MT_before$meth)
MT_after <- data %>% filter(data$state=='MT' & data$before==FALSE)
MT_after_mean <- mean(MT_after$meth)
XX_before <- data %>% filter(data$state=='XX' & data$before==TRUE)
XX_before_mean <- mean(XX_before$meth)
XX_after <- data %>% filter(data$state=='XX' & data$before==FALSE)
XX_after_mean <- mean(XX_after$meth)
diff <- cbind(MT_before_mean, MT_after_mean, XX_before_mean, XX_after_mean)
diff
r3 <- lm(formula = meth ~ state * before + age + sex + tv, data = data)
summary(r3)
print(diff)
summary(r3)
View(diff)
View(diff)
r_XX <- lm(meth~before, data = data, subset=state=='XX')
summary(r_XX)
knitr::opts_chunk$set(echo = TRUE)
data$before <- with(data, ifelse(year<=2005, TRUE, FALSE))
data2 <- data[data$state == 'MT',]
head(data2)
tb <- aggregate(data$meth, by=list(before=data$before), mean)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
data <- read.csv('progresa_sample.csv', header = TRUE)
data <- read.csv('progresa_sample.csv', header = TRUE)
data
data.groupby('progresa)
data.groupby('progresa')
data <- read.csv('progresa_sample.csv', header = TRUE)
controls <- data %>% group_by('progresa')
controls
controls <- data %>% group_by(progresa)
controls
controls <- aggregate(data, by=list(data$progresa), mean)
# controls <- data %>% group_by('progresa')
controls <- aggregate(data, by=list(data$progresa), mean)
data <- read.table('progresa_sample.csv', header = TRUE)
# controls <- data %>% group_by('progresa')
controls <- aggregate(data, by=list(data$progresa), mean)
# controls <- data %>% group_by('progresa')
before_treatment <- data[data$year == 97, ]
before_treatment <- subset(data, select = -c(poor, year,folnum, village))
# controls <- data %>% group_by('progresa')
before_treatment <- data[data$year == 97, ]
before_treatment <- subset(data, select = -c(poor, year,folnum, village))
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(dplyr)
data <- read.csv("progresa_sample.csv", header = TRUE)
pre_treatment <- data[data$year == 97, ]
data <- read.csv("progresa_sample.csv", header = TRUE)
data <- read.csv("progresa_sample.csv", header = TRUE)
pre_treatment <- data[data$year == 97, ]
data <- read.csv("progresa_sample.csv", header = TRUE)
pre_treatment <- data[data$year == 97, ]
pre_treatment <- subset(data, select = -c(poor, year,folnum, village))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(knitr)
data <- read.table('progresa_sample.csv', header = TRUE)
before_treatment <- subset(data, select = -c(poor, year,folnum, village))
data
data <- read.csv('progresa_sample.csv', header = TRUE)
data <- read.csv('progresa_sample.csv', header = TRUE)
# controls <- data %>% group_by('progresa')
before_treatment <- data[data$year == 97, ]
before_treatment <- subset(data, select = -c(poor, year,folnum, village))
before_treatment <- subset(data, select = -c(poor, year,folnum, village))
data
before_treatment <- subset(data, select = -c(poor, year,folnum, village))
before_treatment_group <- before_treatment[before_treatment$progresa == 'basal', ]
control_group <- pre_treatment[pre_treatment$progresa == 0, ]
treatment_means <- as.data.frame(sapply(pre_treatment_group, mean, na.rm=TRUE))
treatment_means <- as.data.frame(sapply(before_treatment_group, mean, na.rm=TRUE))
control_means <- as.data.frame(sapply(control_group, mean, na.rm=TRUE))
means_treatment <- as.data.frame(sapply(pre_treatment_group, mean, na.rm=TRUE))
pre_treatment_group <- subset(pre_treatment_group, select = -c(progresa))
pre_control_group <- subset(pre_control_group, select = -c(progresa))
pre_treatment_group <- pre_treatment[pre_treatment$progresa == 'basal', ]
pre_control_group <- pre_treatment[pre_treatment$progresa == 0, ]
pre_treatment_group <- subset(pre_treatment_group, select = -c(progresa))
pre_control_group <- subset(pre_control_group, select = -c(progresa))
means_treatment <- as.data.frame(sapply(pre_treatment_group, mean, na.rm=TRUE))
means_control <- as.data.frame(sapply(pre_control_group, mean, na.rm=TRUE))
differences <- as.data.frame(means_treatment - means_control)
data <- read.csv('progresa_sample.csv', header = TRUE)
data <- read.csv('progresa_sample.csv', header = TRUE)
before_treatment <- data[data$year == 97, ]
before_treatment <- subset(data, select = -c(poor, year,folnum, village))
before_treatment <- subset(data, select = -c(poor, year,folnum, village))
before_treatment_group <- before_treatment[before_treatment$progresa == 'basal', ]
before_treatment_group <- subset(before_treatment_group, select = -c(progresa))
control_group <- subset(control_group, select = -c(progresa))
treatment_means <- as.data.frame(sapply(before_treatment_group, mean, na.rm=TRUE))
control_means <- as.data.frame(sapply(control_group, mean, na.rm=TRUE))
all_means.colNames <- c("Means Treatment", "Means Control", "Differences")
p_value <- sapply(row.names(combined), function(n) t.test(before_treatment_group[[n]], pre_control_group[[n]])$p.value)
p_value <- sapply(row.names(all_means), function(n) t.test(before_treatment_group[[n]], control_group[[n]])$p.value)
all_means <- cbind(means_treatment, means_control, differences)
all_means.colNames <- c("Means Treatment", "Means Control", "Differences")
p_value <- sapply(row.names(all_means), function(n) t.test(before_treatment_group[[n]], control_group[[n]])$p.value)
names(all_vals)[1]<-"Means Treatment"
names(all_vals)[2]<-"Means Control"
all_vals <- cbind(means_treatment, means_control, differences, p_val)
names(all_vals)[1]<-"Means Treatment"
p_value <- sapply(row.names(all_means), function(n) t.test(before_treatment_group[[n]], control_group[[n]])$p.value)
all_vals <- cbind(treatment_means, control_means, diffs, p_value)
p_value <- sapply(row.names(all_means), function(n) t.test(before_treatment_group[[n]], control_group[[n]])$p.value)
all_vals <- cbind(treatment_means, control_means, diffs, p_value)
diffs <- as.data.frame(treatment_means - control_means)
all_means <- cbind(means_treatment, means_control, differences)
all_means.colNames <- c("Means Treatment", "Means Control", "Differences")
p_value <- sapply(row.names(all_means), function(n) t.test(before_treatment_group[[n]], control_group[[n]])$p.value)
all_vals <- cbind(treatment_means, control_means, diffs, p_value)
names(all_vals)[1]<-"Means Treatment"
names(all_vals)[2]<-"Means Control"
names(all_vals)[3]<-"Differences"
names(all_vals)[4]<-"P-values"
all_vals
names(all_vals)[1]<-"Averages Treatment"
names(all_vals)[2]<-"Averages Control"
names(all_vals)[3]<-"Difference"
names(all_vals)[4]<-"P Value"
all_vals
all_vals
View(data)
View(data)
after_treatment <- data[data$year == 98,]
after_treatment <- data[data$year == 98,]
View(after_treatment)
View(after_treatment)
after_treatment_schooling <- after_treatment[after_treatment$progresa == 'basal', ]
after_control_schooling <- after_treatment[after_treatment$progresa == 0, ]
View(after_treatment_schooling)
View(after_treatment_schooling)
after_treatment_schooling <- after_treatment[after_treatment$progresa == 'basal', ] %>% subset(select = c(sc))
after_treatment_schooling <- after_treatment[after_treatment$progresa == 'basal', ]
<!-- %>% subset(select = c(sc)) -->
after_treatment_schooling <- after_treatment[after_treatment$progresa == 'basal', ]
<!-- %>% subset(select = c(sc)) -->
after_treatment <- data[data$year == 98,]
after_treatment_schooling <- after_treatment[after_treatment$progresa == 'basal', ]
<!-- %>% subset(select = c(sc)) -->
after_treatment_schooling <- after_treatment[after_treatment$progresa == 'basal', ]
after_treatment_schooling <- subset(post_treatment_group_schooling, select = c(sc))
after_treatment_schooling <- subset(after_treatment_schooling, select = c(sc))
View(after_treatment_schooling)
View(after_treatment_schooling)
after_treatment <- data[data$year == 98,]
after_treatment_schooling <- after_treatment[after_treatment$progresa == 'basal', ] %>% subset(select = c(sc))
after_control_schooling <- after_treatment[after_treatment$progresa == 0, ] %>% subset(select = c(sc))
after_treatment_schooling <- after_treatment[after_treatment$progresa == 'basal', ] %>% subset(select = c(sc))
avg_after_treatment_schooling <- mean(after_treatment_schooling$sc)
after_treatment_schooling <- after_treatment[after_treatment$progresa == 'basal', ] %>% subset(select = c(sc))
avg_after_treatment_schooling <- mean(after_treatment_schooling$sc, na.rm = TRUE)
after_control_schooling <- after_treatment[after_treatment$progresa == 0, ] %>% subset(select = c(sc))
avg_control_schooling <- mean(after_control_schooling$sc, na.rm = TRUE)
difference <- avg_after_treatment_schooling - avg_control_schooling
difference <- avg_after_treatment_schooling - avg_control_schooling
difference
control_group <- before_treatment[before_treatment$progresa == 0, ]
schooling_lm <- lm(sc~progresa, data = after_treatment)
summary(schooling_lm)
View(schooling_lm)
View(schooling_lm)
schooling_lm <- lm(sc~progresa+sex+dis_sec+sc+min_dist+dist_cap+hohedu+hohwag+welfre_index+hohage+sc97, data = after_treatment)
schooling_lm <- lm(sc~progresa+sex+dist_sec+sc+min_dist+dist_cap+hohedu+hohwag+welfre_index+hohage+sc97, data = after_treatment)
schooling_lm <- lm(sc~progresa+sex+dist_sec+sc+min_dist+dist_cap+hohedu+hohwag+welfare_index+hohage+sc97, data = after_treatment)
schooling_mr <- lm(sc~progresa+sex+dist_sec+sc+min_dist+dist_cap+hohedu+hohwag+welfare_index+hohage+sc97, data = after_treatment)
schooling_mr <- lm(sc~progresa+dist_sec+sc+min_dist+dist_cap+hohwag+welfare_index+village+sc97, data = after_treatment)
schooling_mr <- lm(sc~progresa+fam_n+min_dist+dist_cap+hohwag+welfare_index+age+village+folnum, data = after_treatment)
schooling_mr <- lm(sc~progresa+fam_n+sc+min_dist+dist_cap+hohwag+welfare_index+village+sc97, data = after_treatment)
schooling_mr <- lm(sc~progresa+fam_n+sc+min_dist+dist_cap+hohwag+welfare_index+village, data = after_treatment)
schooling_mr <- lm(sc~progresa+min_dist+welfare_index+fam_n+dist_cap+hohwag+age+folnum+village, data = after_treatment)
summary(schooling_mm)
summary(schooling_mr)
View(schooling_mr)
View(schooling_mr)
View(schooling_mr)
all_differences <- (after_treatment_means - after_control_means) - (before_treatment_means - before_control_means)
before_treatment <- data[data$year == 97 & data$poor=="pobre", ]
before_treatment <- before_treatment[before_treatment$progresa == 'basal', ]
after_treatment <- data[data$year == 98 & data$poor=="pobre", ]
after_treatment <- after_treatment[after_treatment$progresa == 'basal', ]
before_control <- data[data$year == 97 & data$poor=="pobre", ]
before_control <- before_control[before_control$progresa == 0, ]
after_control <- data[data$year == 98 & data$poor=="pobre", ]
after_control <- after_control[after_control$progresa == 0, ]
before_treatment_means <- mean(before_treatment$sc, na.rm=TRUE)
before_control_means <- mean(before_control$sc, na.rm=TRUE)
after_treatment_means <- mean(after_treatment$sc, na.rm=TRUE)
after_control_means <- mean(after_control$sc, na.rm=TRUE)
treatment_diff <- (after_treatment_means - before_treatment_means)
control_diff <- (after_control_means - before_control_means)
all_differences <- (after_treatment_means - after_control_means) - (before_treatment_means - before_control_means)
diff_treatment
treatment_diff
control_diff
all_differences
treatment_diff
control_diff
all_differences
impoverished <- data %>% filter(data$poor=="pobre")
did_regression <- lm(sc~progresa*year, data = impoverished)
summary(di_regression)
d
summary(did_regression)
impoverished <- data %>% filter(data$poor=="pobre")
multi_regression <- lm(sc~progresa*year+age+village+min_dist+dist_cap+fam_n+hohwag+welfare_index+folnum, data=impoverished)
summary(multi_regression)
multi_regression <- lm(sc~progresa+min_dist+welfare_index+fam_n+dist_cap+hohwag+age+folnum+village, data=impoverished)
summary(multi_regression)
impoverished <- data %>% filter(data$poor=="pobre")
t_test <- t.test(impoverished$sc)
summary(t_test)
t_test$conf.int
install.packages(c("plotly", "shiny"))
install.packages(c("plotly", "shiny", "shinythemes"))
library(plotly)
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
library(shiny)
runApp()
install.packages(c('ggplot2', 'shiny'))
install.packages("shiny")
install.packages(googlesheets)
install.packages("googlesheets")
library(googlesheets)
gs_auth(new_user = TRUE)
library(googlesheets)
gs_auth(new_user = TRUE)
library(googlesheets4)
install.packages("googlesheets4")
install.packages("googlesheets4")
install.packages("googlesheets4")
library(googlesheets4)
install.packages("googlesheets4", binary = TRUE)
install.packages("googlesheets4", binary = TRUE)
install.packages("devtools")
install.packages("devtools")
devtools::install_github("tidyverse/googlesheets4")
sudo apt-get -y install libcurl4-gnutls-dev libxml2-dev libssl-dev
install.packages('devtools', repos='http://cran.rstudio.com/')
install.packages("devtools", repos = "http://cran.rstudio.com/")
install.packages("devtools", bin=TRUE)
install.packages("devtools", type = "win.binary")
install.packages("googlesheets4")
devtools::install_github("tidyverse/googlesheets4")
install.packages("gargle")
install.packages("gargle")
install.packages("gargle", type="binary")
install.packages("gargle", type = "binary")
devtools::install_github("tidyverse/googlesheets4")
remove.packages('fs')
uninstall.packages("fs")
install.packages("fs")
install.packages("fs")
devtools::install_github("tidyverse/googlesheets4")
install.packages("googlesheets4")
install.packages("gargle", ttype = binary)
install.packages("gargle", type = "binary")
install.packages("gargle", type = "source")
devtools::install_github("tidyverse/googlesheets4")
devtools::install_github("tidyverse/googlesheets4")
install.packages("devtools", type = "win.binary")
install.packages("devtools", type = "win.binary")
install.packages("devtools", type = "win.binary")
install.packages("devtools", type = "win.binary")
devtools::install_github("tidyverse/googlesheets4")
install.packages("fs")
devtools::install_github("tidyverse/googlesheets4")
devtools::install_github("tidyverse/googlesheets4")
install.packages("fs", type = "source")
install.packages("Rtools")
devtools::install_github("tidyverse/googlesheets4")
devtools::install_github("fs")
install.packages("fs")
install.packages("fs", type = "source")
install.packages("fs", type = "binary")
install.packages("fs", type = "win.source")
bs4Card(
title = "I am more physically active",
width = 14,
collapsible = FALSE,
closable=FALSE,
radioButtons("physically_active", label="", choices = answers, inline=FALSE, selected = character(0))
)
library(bs4Dash)
bs4Card(
title = "I see friends more often/make new friends at my Senior Center",
width = 14,
collapsible = FALSE,
closable=FALSE,
radioButtons("see_friends", label="", choices = answers, inline=FALSE, selected = character(0))
)
answers <<- c("Almost Never", "Sometimes", "Most of the Time", "Not applicable")
library(shiny)
bs4Card(
title = "I see friends more often/make new friends at my Senior Center",
width = 14,
collapsible = FALSE,
closable=FALSE,
radioButtons("see_friends", label="", choices = answers, inline=FALSE, selected = character(0))
)
# You want to deploy an app in Shinyapps.io or other server
# FIRST STEP----
# Get the token an store it in a cache folder embedded in your app directory
# designate project-specific cache
options(gargle_oauth_cache = ".secrets")
# SECOND STEP----
# Comment lines 14, 18 and 20 and uncomment lines 27 and 28
# You tell gargle to search the token in the secrets folder and to look
# for an auth given to a certain email (enter your email linked to googledrive!)
# drive_auth(cache = ".secrets", email = "adscenterdata@gmail.com")
drive_auth(cache = ".secrets", email = TRUE) # Use only if EXACTLY 1 email is preauthorized
library("googledrive")
library("googlesheets4") # I am using the developing version 0.2.0
# SECOND STEP----
# Comment lines 14, 18 and 20 and uncomment lines 27 and 28
# You tell gargle to search the token in the secrets folder and to look
# for an auth given to a certain email (enter your email linked to googledrive!)
# drive_auth(cache = ".secrets", email = "adscenterdata@gmail.com")
drive_auth(cache = ".secrets", email = TRUE) # Use only if EXACTLY 1 email is preauthorized
gs4_auth(token = drive_token())
list.files(".secrets/")
options(
gargle_oauth_cache = ".secrets",
gargle_oauth_email = TRUE
)
# test
drive_ls()
getwd()
here::here()
rsconnect::showLogs(appName = "ADSDashboard")
rsconnect::showLogs(appName = "ADSDashboard")
source('~/UW/Senior Year/capstone-tanc/app/constants.R')
rsconnect::showLogs(appName = "ADSDashboard")
createNewSheet <- function(center_name){
print("Creating a new Google Sheet...")
drive_auth(cache = ".secrets", email = TRUE)
gs4_auth(token = drive_token())
sheet <- gs4_create(center_name)
drive_mv(file = sheet, path = as_id(folder_url))
# Add row of column names
column.names <- do.call(rbind.data.frame, list(all.columns))
print(column.names)
sheet_append(sheet, column.names)
# get center Id of sheet and add to center_ids data frame (in constants.R)
new_center_id <- sheet
center_ids[nrow(center_ids) + 1,] = list(center_name, new_center_id)
new_center_id
}
source('~/UW/Senior Year/capstone-tanc/app/constants.R')
shiny::runApp('UW/Senior Year/capstone-tanc/app')
source('~/UW/Senior Year/capstone-tanc/app/constants.R')
runApp('~/UW/Senior Year/test')
runApp('UW/Senior Year/capstone-tanc/app')
source('~/UW/Senior Year/capstone-tanc/app/constants.R')
shinyjs::runjs(paste0("$('label[for=\"YourButtonId\"]').text('",TextVariable,"')"))
shinyjs::runjs(paste0("$('label[for=\"YourButtonId\"]').text('",Hello,"')"))
shinyjs::runjs(paste0("$('label[for=\"YourButtonId\"]').text('Hello')"))
runApp('UW/Senior Year/capstone-tanc/app')
library(shinyalert)
library(shinyalerts)
install.packages("shinyalerts")
install.packages("shinyalert")
runApp('UW/Senior Year/test')
library(shinyalert)
runApp('UW/Senior Year/test')
runApp('UW/Senior Year/test')
runApp('UW/Senior Year/capstone-tanc/app')
install.packages("shinyalert")
install.packages("shinyalert")
runApp('UW/Senior Year/capstone-tanc/app')
runApp('UW/Senior Year/capstone-tanc/app')
runApp('UW/Senior Year/test')
runApp('UW/Senior Year/test')
runApp('UW/Senior Year/test')
runApp('UW/Senior Year/test')
runApp('UW/Senior Year/test')
runApp('UW/Senior Year/test')
runApp('UW/Senior Year/test')
runApp('~/UW/Senior Year/capstone-tanc/app')
runApp('UW/Senior Year/capstone-tanc/app')
runApp('UW/Senior Year/test')
runApp('UW/Senior Year/capstone-tanc/app')
runApp('UW/Senior Year/capstone-tanc/app')
runApp('UW/Senior Year/test')
runApp('UW/Senior Year/capstone-tanc/app')
runApp('UW/Senior Year/capstone-tanc/app')
n
n
runApp('UW/Senior Year/capstone-tanc/app')
runApp('UW/Senior Year/capstone-tanc/app')
runApp('UW/Senior Year/capstone-tanc/app')
runApp('UW/Senior Year/capstone-tanc/app')
setwd("~/UW/Senior Year")
setwd("~/UW/Senior Year/test")
text <- Corpus(DirSource("words/"))
install.packages("tm")
install.packages("wordcloud")
text <- Corpus(DirSource("words/"))
install.packages("SnowballC") # for text stemming
install.packages("RColorBrewer") # color palettes
text <- Corpus(DirSource("words/"))
text <- readLines("words/text.txt")
text <- readLines("words/words.txt")
doc <- Corpus(text)
library(tm)
library(wordcloud)
doc <- Corpus(text)
doc <- Corpus(DirSource("words/"))
inspect(doc)
doc <- tm_map(doc, stripWhitespace)
doc <- tm_map(doc, tolower)
doc <- tm_map(doc, removeWords, stopwords("english"))
doc <- tm_map(doc, stemDocument)
wordcloud(doc, scale=c(5,0.5), max.words=100, random.order=FALSE, rot.per=0.35, use.r.layout=FALSE, colors=brewer.pal(8, “Dark2”))
wordcloud(doc, scale=c(5,0.5), max.words=100, random.order=FALSE, rot.per=0.35, use.r.layout=FALSE)
doc <- tm_map(doc, removeWords, c("null"))
wordcloud(doc, scale=c(5,0.5), max.words=100, random.order=FALSE, rot.per=0.35, use.r.layout=FALSE)
docs <- doc
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
wordcloud(doc, scale=c(5,0.5), max.words=1000, random.order=FALSE, rot.per=0.35, use.r.layout=FALSE)
setwd("~/UW/Senior Year/capstone-tanc")
shiny::runApp('app')
runApp('~/UW/Senior Year/test')
runApp('~/UW/Senior Year/test')
runApp('~/UW/Senior Year/capstone-tanc/app')
shiny::runApp('app')
runApp('app')
library(shinycssloaders)
runApp('app')
source('~/UW/Senior Year/capstone-tanc/app/scripts/GaugeChart.R')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
